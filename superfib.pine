//@version=6
indicator("SuperFib", "Superfib", overlay=true)

// Price levels from repeated_values analysis
// Last updated: 2025-04-25 07:01:54
// All 431 levels from file: repeated_values_20250425_070150.txt
var prices = array.from(415.24, 391.27, 382.45, 350.25, 349.65, 347.42, 333.66, 324.68, 318.24, 314.88, 277.95, 270.57, 265.14, 262.2, 261.84, 257.32, 239.33, 216.29, 215.81, 538.12, 531.88, 525.35, 523.81, 518.66, 510.87, 499.48, 492.74, 491.7, 485.25, 483.25, 479.72, 478.08, 474.72, 474.56, 472.33, 471.49, 471.28, 470.75, 470.45, 468.61, 466.01, 464.73, 462.78, 461.65, 460.52, 458.17, 457.78, 456.85, 453.59, 452.52, 450.92, 450.89, 444.98, 441.25, 438.53, 438.25, 438.12, 437.65, 433.44, 431.98, 430.33, 427.19, 424.28, 422.35, 422.05, 421.8, 421.38, 419.75, 417.33, 415.92, 414.75, 412.5, 411.88, 410.9, 409.11, 408.77, 407.68, 405.41, 404.5, 403.98, 403.46, 403.23, 403.0, 402.5, 402.16, 402.01, 401.7, 400.63, 400.59, 398.88, 398.59, 396.1, 394.47, 394.33, 393.73, 392.73, 391.35, 390.9, 387.62, 387.52, 386.65, 386.13, 385.65, 383.75, 383.68, 383.5, 383.05, 380.99, 380.86, 380.55, 380.07, 379.5, 378.03, 376.64, 375.49, 374.89, 374.53, 374.36, 373.41, 373.37, 372.32, 371.97, 371.31, 371.06, 370.8, 370.67, 370.37, 369.75, 369.29, 368.8, 367.65, 367.34, 367.25, 367.05, 365.67, 365.05, 364.78, 364.52, 364.3, 363.88, 363.2, 363.18, 362.5, 362.3, 360.8, 359.79, 359.5, 359.46, 359.35, 358.11, 357.38, 355.13, 354.8, 354.75, 354.72, 353.35, 353.05, 351.76, 351.15, 350.1, 350.05, 348.43, 347.75, 345.68, 345.31, 344.67, 344.0, 343.88, 343.85, 343.65, 343.55, 342.85, 342.1, 341.34, 341.15, 340.71, 340.45, 340.07, 339.28, 338.96, 338.5, 338.32, 338.2, 337.76, 337.24, 336.0, 335.66, 334.57, 334.55, 334.42, 334.13, 333.73, 333.55, 332.63, 331.86, 330.01, 329.93, 329.75, 329.49, 329.37, 329.25, 329.18, 327.5, 327.35, 326.74, 326.62, 326.55, 326.33, 325.75, 324.8, 324.7, 324.51, 324.37, 324.29, 323.63, 323.26, 320.99, 320.41, 320.11, 319.91, 319.4, 319.0, 318.92, 318.89, 318.71, 318.4, 318.12, 317.73, 317.68, 317.67, 316.97, 316.89, 315.85, 315.75, 315.25, 315.13, 315.07, 314.8, 314.7, 314.6, 314.47, 313.97, 313.7, 313.58, 312.25, 312.11, 312.0, 311.43, 311.32, 311.24, 311.04, 311.0, 310.54, 310.24, 309.7, 309.0, 308.54, 307.71, 307.16, 307.0, 306.9, 306.88, 305.83, 305.47, 305.25, 305.13, 304.8, 304.76, 304.75, 304.62, 304.01, 303.56, 303.49, 303.2, 303.12, 302.78, 302.47, 301.96, 301.92, 301.75, 301.17, 300.95, 300.33, 299.4, 299.12, 297.25, 297.23, 296.38, 295.65, 295.51, 293.88, 293.3, 293.12, 292.65, 292.52, 292.17, 291.6, 291.44, 291.37, 291.25, 290.8, 290.74, 289.9, 289.56, 289.5, 287.82, 287.2, 287.16, 286.74, 286.69, 286.0, 285.65, 285.5, 285.32, 284.84, 284.81, 284.06, 283.97, 283.83, 283.66, 283.2, 282.14, 282.02, 281.64, 280.22, 279.74, 279.31, 278.71, 278.37, 278.3, 277.64, 275.87, 275.07, 274.45, 272.76, 272.65, 272.13, 271.82, 271.15, 268.88, 268.35, 267.9, 267.86, 267.25, 266.25, 264.32, 263.98, 262.75, 260.5, 260.25, 256.35, 255.73, 255.72, 253.9, 253.32, 253.14, 251.36, 250.75, 248.29, 247.04, 244.97, 244.03, 244.0, 243.52, 241.1, 241.07, 238.88, 238.11, 237.92, 234.76, 234.12, 234.03, 232.68, 231.93, 231.83, 230.05, 229.47, 228.44, 228.07, 228.06, 227.04, 226.36, 223.35, 222.69, 222.12, 221.75, 220.84, 220.33, 220.15, 220.04, 220.0, 217.14, 216.91, 214.37, 214.25, 212.7, 212.5, 211.66, 211.39, 207.83, 207.69, 207.25, 206.64, 206.2, 204.51, 202.33, 199.38, 199.37, 198.8, 197.55, 197.5, 196.75, 194.91, 193.38, 192.95, 191.0, 188.69, 188.13, 187.46, 187.4, 185.55, 183.77, 182.45, 181.22, 180.89, 177.31, 174.56, 165.37, 161.66, 152.21, 119.88)  // Auto-generated price levels
var texts = array.fromrequency labels

// Appearance Settings
var lineColor = input.color(color.new(color.blue, 0), "Line Color")
// Line width is fixed at 2
var labelTxtColor = input.color(color.white, "Text Color")
var labelBgColor = input.color(color.new(color.blue, 30), "Background Color")
var labelSize = input.string("Normal", "Size", options=["Tiny", "Small", "Normal", "Large", "Huge"])
var labelAlign = input.string("Right", "Position", options=["Left", "Right"])

// Helper Functions
getLabelSize(str) =>
    switch str
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge
        => size.normal

getLabelStyle(str) =>
    switch str
        "Left" => label.style_label_left
        "Right" => label.style_label_right
        => label.style_label_right

// Main logic
if barstate.islast
    // Draw lines and labels for each price level
    for i = 0 to array.size(prices) - 1 
        price = array.get(prices, i)
        labelText = array.get(texts, i) 
        
        // Draw horizontal line
        line.new(bar_index - 1, price, bar_index, price, 
                 color=lineColor, 
                 width=2,          // Line thickness remains 2
                 extend=extend.both) // <-- Changed extend to extend.both
        
        // Create label
        label.new(bar_index, price, labelText,
                         xloc=xloc.bar_index, 
                         yloc=yloc.price,
                         color=labelBgColor,
                         textcolor=labelTxtColor,
                         size=getLabelSize(labelSize),
                         style=getLabelStyle(labelAlign),
                         tooltip=labelText)